# файл test_generate.py
import pytest
from pytest_mock import MockerFixture
from maze import generate  # импортируем модуль с функцией generate


# Указываем, какие аргументы и значения нужно передать в функцию тесты.
# Будет передавать высоту, ширину и ожидаемый лабиринт для каждого
# тестового случая
@pytest.mark.parametrize(
    argnames=[
        "height",
        "width",
        "maze",  # ожидаемый лабиринт
    ],
    argvalues=[
        [  # тестовый случай 1
            3,  # высота
            3,  # ширина
            [  # лабиринт
                ['█', '█', '█', '█', '█', '█', '█'],
                ['█', ' ', ' ', ' ', ' ', ' ', '█'],
                ['█', ' ', '█', ' ', '█', ' ', '█'],
                ['█', ' ', '█', ' ', '█', ' ', '█'],
                ['█', ' ', '█', ' ', '█', ' ', '█'],
                ['█', ' ', '█', ' ', '█', ' ', '█'],
                ['█', '█', '█', '█', '█', '█', '█']
            ],
        ],
        [  # тестовый случай 2
            2,  # высота
            4,  # ширина
            [  # лабиринт
                ['█', '█', '█', '█', '█', '█', '█', '█', '█'],
                ['█', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '█'],
                ['█', ' ', '█', ' ', '█', ' ', '█', ' ', '█'],
                ['█', ' ', '█', ' ', '█', ' ', '█', ' ', '█'],
                ['█', '█', '█', '█', '█', '█', '█', '█', '█']
            ],
        ],
        [  # тестовый случай 3
            1,  # высота
            1,  # ширина
            [  # лабиринт
                ['█', '█', '█'],
                ['█', ' ', '█'],
                ['█', '█', '█']
            ],
        ],
    ]
)
def test_generation_and_solution(mocker: MockerFixture, height: int, width: int,
                                 maze: list) -> None:
    """

    :param mocker: Позволяет подменять результаты других функций на фиктивные
    :param height: Высота
    :param width: Ширина
    :param maze: Ожидаемый лабиринт
    :return:
    """
    mocker.patch(
        "random.randint",
        # подменяем функцию генерации случайных чисел на фиксированную
        side_effect=lambda a, b: a + b - 1
        # возвращаем всегда максимальное значение из диапазона
        # Это нужно для того, чтобы генерация лабиринта была детерминированной
        # и не зависела от случайности.
    )
    #  Вызываем функцию generate с заданными параметрами и сравниваем полученный
    #  лабиринт с ожидаемым. Если они совпадают, то тест проходит успешно.
    #  Если нет, то тест выдает ошибку
    actual_maze = generate(width,
                           height)  # вызываем функцию с заданными параметрами
    assert maze == actual_maze  # сравниваем ожидаемый и фактический результат
